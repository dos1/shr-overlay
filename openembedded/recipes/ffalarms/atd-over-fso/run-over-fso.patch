--- src/atd.c-orig	2004-02-02 16:30:39.000000000 +0100
+++ src/atd.c	2009-03-21 12:35:58.000000000 +0100
@@ -7,10 +7,12 @@
  *	Copyright (C) 1996, Paul Gortmaker
  *	Copyright (C) 2001, Russell Nelson
  *	Copyright (C) 2002-2004, Nils Faerber <nils@handhelds.org>
+ *	Copyright (C) 2009, Łukasz Pankowski <lukpank@o2.pl>
  *
  *	Released under the GNU General Public License, version 2,
  *	included herein by reference.
  *
+ *	Łukasz Pankowski: modified to work over org.freesmartphone.otimed
  */
 
 #include <stdio.h>
@@ -31,6 +33,15 @@
 #include <dirent.h>
 #include <pwd.h>
 #include <signal.h>
+#include <glib.h>
+#include <dbus/dbus-glib.h>
+#include <dbus/dbus-glib-lowlevel.h>
+#include <dbus/dbus.h>
+#include "atd-alarm.h"
+#include "atd-alarm-glue.h"
+
+#define DBUS_NAME "org.openmoko.projects.ffalarms.atd"
+#define DBUS_RECONNECT_TIMEOUT 10
 
 
 /* globals... */
@@ -62,33 +73,23 @@
 }
 
 
-void waitfor (time_t t)
+void rtc_set_time (void)
 {
-int rtcfd, tfd, retval= 0;
-unsigned long data;
+int rtcfd, retval= 0;
 struct rtc_time rtc_tm;
-time_t now, then;
+time_t now;
 struct tm *tm;
-struct timeval tv;
-int nfds;
-fd_set afds;
 
 #ifdef DEBUG
-	printf("waitfor %ld\n", t);
+	printf("rtc_set_time\n");
 #endif
 	rtcfd = open ("/dev/rtc", O_RDONLY);
 
 	if (rtcfd ==  -1) {
+		/* treat it as warning, may be should retry? */
 		perror("/dev/rtc");
-		exit(errno);
-	}
-
-	/* Read the RTC time/date */
-	tfd = open ("trigger", O_RDWR);
-
-	if (tfd ==  -1) {
-		perror("trigger");
-		exit(errno);
+		errno = 0;
+		return;
 	}
 
 	/* Set the RTC time/date */
@@ -112,112 +113,7 @@
 		rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec);
 #endif
 
-	tm = gmtime (&t);
-
-#ifdef DEBUG
-	printf ("Alarm date/time is %d-%d-%d, %02d:%02d:%02d.\n",
-		tm->tm_mday, tm->tm_mon + 1, tm->tm_year + 1900,
-		tm->tm_hour, tm->tm_min, tm->tm_sec);
-#endif
-	if (t && compare_rtc_to_tm (&rtc_tm, tm) >= 0) {
-		close (rtcfd);
-		close (tfd);
-		return;
-	}
-
-	if (t) {
-		/* set the alarm */
-		rtc_tm.tm_mday = tm->tm_mday;
-		rtc_tm.tm_mon = tm->tm_mon;
-		rtc_tm.tm_year = tm->tm_year;
-		rtc_tm.tm_sec = tm->tm_sec;
-		rtc_tm.tm_min = tm->tm_min;
-		rtc_tm.tm_hour = tm->tm_hour;
-		retval = ioctl (rtcfd, RTC_ALM_SET, &rtc_tm);
-		if (retval == -1) {
-			perror ("ioctl");
-			exit (errno);
-		}
-#ifdef DEBUG
-		printf ("Alarm date/time now set to %d-%d-%d, %02d:%02d:%02d.\n",
-			rtc_tm.tm_mday, rtc_tm.tm_mon + 1, rtc_tm.tm_year + 1900,
-			rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec);
-#endif
-
-		/* Read the current alarm settings */
-		retval = ioctl (rtcfd, RTC_ALM_READ, &rtc_tm);
-		if (retval == -1) {
-			perror ("ioctl");
-			exit (errno);
-		}
-
-#ifdef DEBUG
-		printf ("Alarm date/time now in RTC: %d-%d-%d, %02d:%02d:%02d.\n",
-			rtc_tm.tm_mday, rtc_tm.tm_mon + 1, rtc_tm.tm_year + 1900,
-			rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec);
-#endif
-
-		/* Enable alarm interrupts */
-		retval = ioctl (rtcfd, RTC_AIE_ON, 0);
-		if (retval == -1) {
-			perror ("ioctl");
-			exit (errno);
-		}
-	}
-
-#ifdef DEBUG
-	printf ("Waiting for alarm...");
-	fflush (stdout);
-#endif
-	/* This blocks until the alarm ring causes an interrupt */
-	FD_ZERO (&afds);
-	if (t)
-		FD_SET (rtcfd, &afds);
-	FD_SET (tfd, &afds);
-	nfds = rtcfd+1;
-	if (tfd > rtcfd)
-		nfds = tfd + 1;
-	/* Wait up to ten minutes. */
-	tv.tv_sec = 10 * 60;
-	tv.tv_usec = 0;
-	then = now;
-	if (select (nfds, &afds, (fd_set *) 0, (fd_set *) 0, &tv) < 0) {
-		if (errno != EINTR)
-			perror ("select");
-		exit (errno);
-	}
-	now = time (NULL);
-#ifdef DEBUG
-	printf ("While we were sleeping, %d seconds elapsed, but %d alarms passed\n",
-		(int)(now - then), (int)(tv.tv_sec));
-#endif
-	if (FD_ISSET (rtcfd, &afds)) {
-		retval = read (rtcfd, &data, sizeof (unsigned long));
-		if (retval == -1) {
-			perror ("read");
-			exit (errno);
-		}
-	}
-	if (FD_ISSET(tfd, &afds)) {
-		retval = read (tfd, &data, 1);
-		if (retval == -1) {
-			perror ("read");
-			exit (errno);
-		}
-	}
-#ifdef DEBUG
-	printf ("Something happened!\n");
-#endif
-
-	/* Disable alarm interrupts */
-	retval = ioctl (rtcfd, RTC_AIE_OFF, 0);
-	if (retval == -1) {
-		perror ("ioctl");
-		exit (errno);
-	}
-
 	close (rtcfd);
-	close (tfd);
 }
 
 
@@ -345,11 +241,190 @@
 }
 
 
+G_DEFINE_TYPE(AtdAlarm, atd_alarm, G_TYPE_OBJECT);
+
+
+static void atd_alarm_finalize (GObject* self) {
+	g_object_unref(((AtdAlarm*) self)->alarm_proxy);
+	G_OBJECT_CLASS (atd_alarm_parent_class)->finalize (self);
+}
+
+
+static void atd_alarm_class_init(AtdAlarmClass *cls)
+{
+	G_OBJECT_CLASS (cls)->finalize = atd_alarm_finalize;
+}
+
+
+static void atd_alarm_init(AtdAlarm *self)
+{
+}
+
+
+AtdAlarm* atd_alarm_new (DBusGConnection *bus, int exit_on_error) {
+	AtdAlarm *self = g_object_new(ATD_TYPE_ALARM, NULL);
+	if (!self)
+		return NULL;
+	self->alarm_proxy = dbus_g_proxy_new_for_name
+		(bus, "org.freesmartphone.otimed",
+		 "/org/freesmartphone/Time/Alarm",
+		 "org.freesmartphone.Time.Alarm");
+	self->exit_on_error = exit_on_error;
+	return self;
+}
+
+
+gboolean input_on_trigger(GIOChannel *source, GIOCondition condition,
+		   AtdAlarm *obj)
+{
+char data;
+
+	if (read (g_io_channel_unix_get_fd(source), &data, 1) == -1) {
+		perror ("read");
+		exit (errno);
+	}
+	atd_alarm_alarm(obj);
+
+	return TRUE;
+}
+
+
+void display_free_g_error(GError **error)
+{
+	if ((*error)->domain == DBUS_GERROR &&
+	    (*error)->code == DBUS_GERROR_REMOTE_EXCEPTION)
+		g_printerr("Remote exception: %s: %s\n",
+			   dbus_g_error_get_name(*error),
+			   (*error)->message);
+	else
+		g_printerr("Error: %s\n", (*error)->message);
+	g_error_free(*error);
+	*error = NULL;
+}
+	
+
+void atd_alarm_waitfor(AtdAlarm *self, time_t t)
+{
+GError *error;
+
+	if (!t)
+		return;
+
+	rtc_set_time();
+	error = NULL;
+	if (!dbus_g_proxy_call(self->alarm_proxy, "SetAlarm", &error,
+			       G_TYPE_STRING, DBUS_NAME,
+			       G_TYPE_INT, t, G_TYPE_INVALID,
+			       G_TYPE_INVALID)) {
+		display_free_g_error(&error);
+		if (self->exit_on_error)
+			exit(1);
+	}
+	self->exit_on_error = FALSE;
+#ifdef DEBUG
+	printf("DBus waitfor: %d\n", (int) t);
+#endif
+}
+
+
+void name_owner_changed(DBusGProxy *proxy, const char *name,
+			const char *prev_name, const char *new_name,
+			AtdAlarm *obj)
+{
+	if (!strcmp(name, "org.freesmartphone.otimed") && *new_name) {
+#ifdef DEBUG
+		printf("DBus NameOwnerChanged: org.freesmartphone.otimed\n");
+#endif
+		atd_alarm_alarm(obj);
+	}
+}
+
+
+void disconnected(DBusGProxy *obj, GMainLoop *ml)
+{
+#ifdef DEBUG
+	printf("DBus disconnected\n");
+#endif
+	g_main_loop_quit(ml);
+}
+
+
+int start_atd_alarm(GIOChannel *trigger, int exit_on_error)
+{
+GMainLoop *ml;
+DBusGConnection *bus;
+GError *error;
+DBusError dbus_error;
+DBusGProxy *proxy;
+AtdAlarm *obj;
+int code;
+guint id;
+
+	dbus_g_object_type_install_info(ATD_TYPE_ALARM,
+					&dbus_glib_atd_alarm_object_info);
+
+	error = NULL;
+	bus = dbus_g_bus_get(DBUS_BUS_SYSTEM, &error);
+	if (!bus) {
+		g_printerr("failed to connect to DBUS: %s\n",
+			   error->message);
+		g_error_free(error);
+		return 1;
+	}
+
+	dbus_error_init(&dbus_error);
+	code = dbus_bus_request_name(dbus_g_connection_get_connection(bus),
+				    DBUS_NAME, DBUS_NAME_FLAG_DO_NOT_QUEUE,
+				    &dbus_error);
+	if (code != DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER) {
+		if (code == -1)
+			g_printerr("Error: %s\n", dbus_error.message);
+		else
+			g_printerr("could not register name (%d): %s\n",
+				   code, DBUS_NAME);
+		exit(1);
+	}
+
+	obj = atd_alarm_new(bus, exit_on_error);
+	if (!obj) {
+		g_printerr("Failed to create AtdAlarm object");
+		exit(1);
+	}
+	dbus_g_connection_register_g_object(bus, "/", G_OBJECT(obj));
+
+	atd_alarm_alarm((AtdAlarm *) obj);
+
+	proxy = dbus_g_proxy_new_for_name(bus, "org.freedesktop.DBus",
+					  "/org/freedesktop/DBus",
+					  "org.freedesktop.DBus");
+	dbus_g_proxy_add_signal(proxy, "NameOwnerChanged", G_TYPE_STRING,
+				G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INVALID);
+	dbus_g_proxy_connect_signal (proxy, "NameOwnerChanged",
+				     G_CALLBACK(name_owner_changed), obj, NULL);
+
+	ml = g_main_loop_new(NULL, FALSE);
+	id = g_io_add_watch(trigger, G_IO_IN, (GIOFunc) input_on_trigger, obj);
+
+	dbus_connection_set_exit_on_disconnect
+		(dbus_g_connection_get_connection(bus), FALSE);
+	g_signal_connect(proxy, "destroy", G_CALLBACK(disconnected), ml);
+
+	g_main_loop_run(ml);
+	g_source_destroy(g_main_context_find_source_by_id(NULL, id));
+	g_object_unref(proxy);
+	g_object_unref(obj);
+	dbus_g_connection_unref(bus);
+	g_main_loop_unref(ml);
+
+	return 0;
+}
+
+
 int main (int argc, char *argv[])
 {
-struct dirent *dirent;
-unsigned long this, next, now;
 char *argv0;
+int tfd;
+GIOChannel *trigger;
 
 	argv0 = strrchr(argv[0], '/');
 	if (!argv0)
@@ -372,7 +447,32 @@
 	signal (SIGCHLD, SIG_IGN);
 	signal (SIGPIPE, SIG_IGN);
 
+	tfd = open ("trigger", O_RDWR);
+	if (tfd ==  -1) {
+		perror("trigger");
+		exit(errno);
+	}
+
+	g_type_init();
+	trigger = g_io_channel_unix_new(tfd);
+	if (start_atd_alarm(trigger, TRUE))
+		return 1;
 	while (1) {
+		sleep(DBUS_RECONNECT_TIMEOUT);
+		start_atd_alarm(trigger, FALSE);
+	}
+}
+
+
+gboolean atd_alarm_alarm(AtdAlarm *self)
+{
+struct dirent *dirent;
+unsigned long this, next, now;
+
+#ifdef DEBUG
+		printf("atd_alarm_alarm() run at: %d\n", (int) time(NULL));
+#endif
+
 		/* run all the jobs in the past */
 		now = time (NULL);
 		scan_from_top ();
@@ -402,8 +502,7 @@
 #endif
 		if (next == ULONG_MAX)
 			next = 0;
-		waitfor (next);
-	}
+		atd_alarm_waitfor (self, next);
 
-return 0;
+		return TRUE;
 } 
--- /dev/null	2009-03-20 20:48:03.511827854 +0100
+++ src/atd-alarm.h	2009-03-21 12:09:12.000000000 +0100
@@ -0,0 +1,25 @@
+#ifndef ATD_ALARM_H
+#define ATD_ALARM_H
+
+#include <glib-object.h>
+#include <dbus/dbus-glib.h>
+
+#define ATD_TYPE_ALARM (atd_alarm_get_type())
+
+typedef struct _AtdAlarm
+{
+	GObject parent;
+	DBusGProxy *alarm_proxy;
+	int exit_on_error;
+} AtdAlarm;
+
+typedef struct _AtdAlarmClass
+{
+	GObjectClass parent_class;
+} AtdAlarmClass;
+
+static gboolean atd_alarm_alarm(AtdAlarm *self);
+
+static void atd_alarm_waitfor(AtdAlarm *self, time_t t);
+
+#endif
--- /dev/null	2009-03-20 20:48:03.511827854 +0100
+++ src/atd-alarm.xml	2009-03-16 17:55:48.000000000 +0100
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<node name="/">
+  <interface name="org.freesmartphone.Notification">
+    <annotation name="org.freedesktop.DBus.GLib.CSymbol" value="atd_alarm" />
+      <method name="Alarm" />
+  </interface>
+</node>
