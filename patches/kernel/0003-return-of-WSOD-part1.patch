This patch reverts commit d9a7be9aab65cd86981d60806041ac11fe514277.  This revert is
required in order to revert later commit that re-introduced a WDOD.

This patch is temporary, until the issue is fixed in the kernel git repo.

I refuse to sign off on this!  ~mwester

--- a/dev/null	2009-04-03 23:39:32.282001359 -0500
+++ b/recipes/linux/linux-openmoko-2.6.28/un-clean-debug.patch	2009-04-18 16:57:56.000000000 -0500
@@ -0,0 +1,90 @@
+commit d9a7be9aab65cd86981d60806041ac11fe514277
+Author: Nicolas Dufresne <nicolas.dufresne@gmail.com>
+Date:   Mon Apr 13 10:43:30 2009 -0400
+
+    fbcon: Cleaned unnecessary debugging output (fix bug 2265)
+    
+    Cleaned unnecessary debugging output.
+    
+    Signed-off-by: Nicolas Dufresne <nicolas.dufresne@gmail.com>
+
+diff --git a/drivers/video/console/fbcon.c b/drivers/video/console/fbcon.c
+index 208da5a..4cefce8 100644
+--- a/drivers/video/console/fbcon.c
++++ b/drivers/video/console/fbcon.c
+@@ -3130,13 +3130,17 @@ static void fbcon_get_requirement(struct fb_info *info,
+ static int fbcon_event_notify(struct notifier_block *self, 
+ 			      unsigned long action, void *data)
+ {
+-	struct fb_event *event = data;
+-	struct fb_info *info = event->info;
++	struct fb_event *event;
++	struct fb_info *info;
+ 	struct fb_videomode *mode;
+ 	struct fb_con2fbmap *con2fb;
+ 	struct fb_blit_caps *caps;
+ 	int ret = 0;
+ 
++	printk(KERN_INFO "fbcon_event_notify action=%ld, data=%p\n", action, data);
++
++	event = data;
++	info = event->info;
+ 	/*
+ 	 * ignore all events except driver registration and deregistration
+ 	 * if fbcon is not active
+diff --git a/drivers/video/display/jbt6k74.c b/drivers/video/display/jbt6k74.c
+index 5d7a651..4524be3 100644
+--- a/drivers/video/display/jbt6k74.c
++++ b/drivers/video/display/jbt6k74.c
+@@ -523,7 +523,7 @@ static ssize_t gamma_write(struct device *dev, struct device_attribute *attr,
+ 	int reg = reg_by_string(attr->attr.name);
+ 	unsigned long val = simple_strtoul(buf, NULL, 10);
+ 
+-	dev_info(dev, "writing gama %lu\n", val & 0xff);
++	dev_info(dev, "**** jbt6k74 writing gama %lu\n", val & 0xff);
+ 
+ 	mutex_lock(&jbt->lock);
+ 	jbt_reg_write(jbt, reg, val & 0xff);
+@@ -539,7 +539,7 @@ static ssize_t reset_write(struct device *dev, struct device_attribute *attr,
+ 	struct jbt_info *jbt = dev_get_drvdata(dev);
+ 	struct jbt6k74_platform_data *pdata = jbt->spi_dev->dev.platform_data;
+ 
+-	dev_info(dev, "reset\n");
++	dev_info(dev, "**** jbt6k74 reset\n");
+ 
+ 	mutex_lock(&jbt->lock);
+ 
+@@ -593,7 +593,7 @@ static int fb_notifier_callback(struct notifier_block *self,
+ 
+ 	jbt = container_of(self, struct jbt_info, fb_notif);
+ 
+-	dev_dbg(&jbt->spi_dev->dev, "event=%lu\n", event);
++	dev_dbg(&jbt->spi_dev->dev, "jbt6k74 event=%lu\n", event);
+ 
+ 	if (event != FB_EVENT_BLANK && event != FB_EVENT_CONBLANK)
+ 		return 0;
+@@ -712,7 +712,7 @@ static int jbt_suspend(struct spi_device *spi, pm_message_t state)
+ 
+ 	jbt6k74_enter_state(jbt, JBT_STATE_DEEP_STANDBY);
+ 
+-	dev_info(&spi->dev, "suspended\n");
++	dev_info(&spi->dev, "**** jbt6k74 suspend end\n");
+ 
+ 	return 0;
+ }
+@@ -722,12 +722,14 @@ int jbt6k74_resume(struct spi_device *spi)
+ 	struct jbt_info *jbt = dev_get_drvdata(&spi->dev);
+ 	struct jbt6k74_platform_data *pdata = spi->dev.platform_data;
+ 
++	dev_info(&spi->dev, "**** jbt6k74 resume start\n");
++
+ 	jbt6k74_enter_state(jbt, jbt->normal_state);
+ 
+ 	if (pdata->resuming)
+ 		(pdata->resuming)(0);
+ 
+-	dev_info(&spi->dev, "resumed\n");
++	dev_info(&spi->dev, "**** jbt6k74 resume end\n");
+ 
+ 	return 0;
+ }
